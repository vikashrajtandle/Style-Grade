# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_1DQ3fxRSCHhhJdKV1hpryQYe__2DQwp

This is the Code for Deployment of the trained model.
Here, we create an interface for taking inputs form user and feed it to the model for prediction.
"""

# !pip install streamlit
# !npm install -g localtunnel

import pandas as pd
import streamlit as st
from sklearn.linear_model import LogisticRegression
import pickle
from pickle import load

#Load the models
with open("LabelEncoder.pkl","rb") as file:
  label_encoder=pickle.load(file)

with open("SIBTC_model.pkl","rb") as file:
  model=pickle.load(file)

features=["gender","masterCategory","subCategory","articleType","baseColour","season","year","usage"]

st.title("SIBTF : Should I Buy The Fashoin?\n")
st.write("😎")
st.sidebar.header("About this app")
st.sidebar.write("This app will tell you the rating of the product.\n GOOD😊 > OKAY😐 > BAD😞\n Please select the combinations and view the rating.")
import streamlit as st

st.markdown(
    """
    <style>
    [data-testid="stSidebar"] {
        background-color: #e3cdb3;
        color: black;
    }
    [data-testid="stIconMaterial"] {
        color: black;
        background-color: #f5efe5;
        border-radius: 100%;
    }
    [data-testid="stHeadingWithActionElements"]{
            background: linear-gradient(
        -45deg,
        #f000ff,
        #4deeea
      );
      background-size: 400% 400%;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      animation: gradientShift 1s ease infinite;
      text-shadow: 0 0 2px rgba(255,255,255,0.3);
    }
    </style>
    """,
    unsafe_allow_html=True
)

#processing user input
user_input={}
for ft in features:

  if ft == "year":
    user_input[ft]=st.number_input("Enter year:", min_value=2000, max_value=2018,value=2012)
  else:
    le = label_encoder[ft]    # only use encoder for categorical features
    option=st.selectbox(f"Select {ft}", options=le.classes_) #option is now in the string format
    user_input[ft]= le.transform([option])[0]  #now the user_input[ft] stores the labeled form of the option

#Predict button
if st.button("Predict Rating"):
  input_df = pd.DataFrame([user_input])
  pred_num = model.predict(input_df)[0]
  pred_label = label_encoder["rating"].inverse_transform([pred_num])[0]
  st.success(f"Rating: **{pred_label}**")